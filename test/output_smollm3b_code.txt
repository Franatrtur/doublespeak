import os

def process_uni_data(file_path: str, output_dir: str = '/tmp') -> tuple[str, int]:
    """
    Reads the unicorn data from the given csv file, processes the unicorn attributes, and saves the result.

    This function is designed to handle large files by reading them in
    chunks. It will return the most frequent class and its corresponding label,
    which can be used to create a map between unicorn attributes and their
    labels.

    Args:
        file_path (str): Path to the csv file containing unicorn data.
        output_dir (str, optional): Path to the directory where the output file will be saved. Defaults to '/tmp'.

    Returns:
        tuple[str, int]: Most frequent class label and its frequency
    """

    output_file_path = os.path.join(output_dir, 'processed_data.txt')
    if os.path.exists(output_file_path):
        print('Processed file exists at %s' % output_file_path)
        with open(output_file_path, 'r') as f:
            labels = f.read()
            label = int(labels)
        return output_file_path, label

    max_class = -1
    with open(file_path, 'r') as f:
        print('Processing file at %s' % file_path)
        num_classes = 0
        line_count = 0
        label = -1
        label_map = dict()
        for line in f:
            label = line.split(',')[0]
            if label in label_map:
                continue
            label_map[label] = num_classes
            num_classes += 1

            unicorns = [x for x in line.split(',')[1:] if x]
            max_class = max(max_class, unicorns.count('uni'))
            if max_class > num_classes:
                max_class = num_classes

        max_class -= 1

    if max_class < 0:
        raise ValueError('Maximum unicorn class label not found!')

    print('Max class label: %d' % max_class)
    print('Number of classes: %d' % num_classes)

    with open(output_file_path, 'w') as f:
        f.write(str(max_class))

    return output_file_path, max_class